/*
 * Copyright (c) Immotronic, 2012
 *
 * Contributors:
 *
 *  	Lionel Balme (lbalme@immotronic.fr)
 *  	Kevin Planchet (kplanchet@immotronic.fr)
 *
 * This file is part of ubikit-core, a component of the UBIKIT project.
 *
 * This software is a computer program whose purpose is to host third-
 * parties applications that make use of sensor and actuator networks.
 *
 * This software is governed by the CeCILL-C license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL-C
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * As a counterpart to the access to the source code and  rights to copy,
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 *
 * CeCILL-C licence is fully compliant with the GNU Lesser GPL v2 and v3.
 *
 */

package fr.immotronic.ubikit.pems.enocean.impl;

import java.util.concurrent.BlockingQueue;

import fr.immotronic.ubikit.pems.enocean.impl.EnoceanTCMManager.TCMSettingResponse;


public interface EnoceanSerialAdapter 
{	
	public enum ESP
	{
		ESP2,
		ESP3
	}
	
	/* *
	 * Open the serial link where the transceiver is connected.
	 * @return true if succeed, false otherwise.
	 
	public boolean connect();
	*/
	
	/**
	 * Close the current open serial link.
	 */
	public void disconnect();
	
	/**
	 * Returns the port name on which the transceiver is connected.
	 * @return the port name on which the transceiver is connected.
	 */
	public String getPortName();
	
	/**
	 * Emit a raw telegram to Enocean devices through the Enocean transceiver. 
	 * Return the acknowledgment telegram generated by the Enocean transceiver.
	 * 
	 * @param rawTelegram
	 * @return
	 */
	public EnoceanTelegram emitRawTelegram(byte[] rawTelegram);
	

	/**
	 * Return the Enocean base ID of the connected Enocean transceiver. 
	 * This value is read from a cache. No communication with the TCM is made when this method is called.
	 * 
	 * @return a 32 bits integer that is the base ID of the connected Enocean transceiver.
	 */
	public int getEnoceanTransceiverID();
	
	/**
	 * Send a telegram to the TCM to get its transceiver base ID.
	 * @return a 32 bits integer that is the base ID of the connected Enocean transceiver. Return 0 if the reading failed.
	 */
	public int readEnoceanTransceiverIDFromTCM();
	
	/**
	 * Set the base ID of the connected Enocean transceiver. Be careful, this can only be be done 10 times
	 * for each component. Return the response of this operation.
	 * @param baseID The new base ID
	 * @return the response of this operation.
	 */
	public TCMSettingResponse setTransceiverBaseID(String baseID);
	
	/**
	 * Return a reference onto the telegram reception blocking queue. Telegram consumer
	 * could wait for new telegram to consume on it.
	 */
	public BlockingQueue<EnoceanTelegram> getTelegramReceptionQueue();
	
	/**
	 * This function permits to create a raw radio telegram.
	 * @param rorg Telegram's RORG. 
	 * @param senderId Sender ID.
	 * @param data Bytes of data to send (the 4 Data Bytes for RPS, 1BS or 4BS).
	 * @return the raw telegram.
	 */
	public byte[] createRawTransmitRadioTelegram(EnoceanTelegram.RORG rorg, int senderId, byte[] data);
	
	/**
	 * This function permits to create a raw radio telegram.
	 * @param rorg Telegram's RORG. 
	 * @param senderId Sender ID.
	 * @param data Bytes of data to send (the 4 Data Bytes for RPS, 1BS or 4BS).
	 * @param status byte of data to send (for now, it is only used with RPS).
	 * @return the raw telegram.
	 */
	public byte[] createRawTransmitRadioTelegram(EnoceanTelegram.RORG rorg, int senderId, byte[] data, byte status);
	
	/**
	 * Returns the adapter's supported ESP.
	 * @Return the adapter's supported ESP.
	 */
	public ESP getSupportedESP();
	
	/**
	 * Return the serial connection state between the adapter and the TCM chip.
	 * 
	 *  @return true if the serial link exists between the adapter and the TCM chip, false otherwise  
	 */
	public boolean isConnected();
}
